/*
 Group 5 Design Do It Urshelf
 WiFi Web Server Motor Control

 This sketch will print the IP address of your WiFi Shield (once connected)
 to the Serial monitor. From there, you can open that address in a web browser
 to control the motor.

 If the IP address of your shield is yourAddress:
 http://yourAddress/H turns the motor on
 http://yourAddress/L turns it off


 Circuit:
 * WiFi shield attached
 * Firebeetle ESP32 board
 * Motor attached to pin 2 & 13 
 */

#include <WiFi.h>

// Network credentials
const char* ssid     = "NETGEAR59";
const char* password = "calmshoe785";

WiFiServer server(80);

void setup()
{
    Serial.begin(115200);
    pinMode(2, OUTPUT);      // set the motor pin mode
    pinMode(13, OUTPUT);
    delay(100);

    // We start by connecting to a WiFi network

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    
    server.begin();

}

void loop(){
 WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("New Client.");          // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to turn the Motor on.<br>");
            client.print("Click <a href=\"/L\">here</a> to turn the Motor off.<br>");
            

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          digitalWrite(13, LOW);               // GET /H turns pin 13 off
          digitalWrite(2, HIGH);               // GET /H turns pin 2 on

          delay(10000);

          digitalWrite(13, High);               // turns pin 13 on
          digitalWrite(2, LOW);                 // turns pin 2 off

          delay(10000);
          
          digitalWrite(13, LOW);               // turns pin 13 off
          digitalWrite(2, LOW);               // turns pin 2 off

          delay(100);
        }
        else
        {
          digitalWrite(13, LOW);               // turns the Motor off
          digitalWrite(2, LOW);               
        } 
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(13, LOW);               // GET /L turns the Motor off
          digitalWrite(2, LOW);               // GET /L turns the Motor off
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
  }
}